#GENERATOR AND EXAMPLES ON GENERATOR 
# A list is an iterator object (True/False).


num = 10

for i in range(num):
    print(i)


# In[2]:


def add_nums(x,y):
    return x + y

add_nos = add_nums
add_nos(2,5)


# In[3]:


type(add_nos)


# In[6]:


def add_nums(x,y):
    yield x + y

add_nos = add_nums
add_nos(2,5)


# In[7]:


type(add_nos)


# In[8]:


def get_nums(n):
    i = 1
    while i <= n:
        yield i
        i += 1


# In[9]:


get_nos = get_nums
get_nos(20)


# In[10]:


for num in get_nos(20):
    print(num)


# In[11]:


get_nos2 = [num for num in range(20)]
get_nos2


# In[12]:


for num in get_nos(20):
    print(num)


# ### Generators Examples
# 
# - You're working as a data analyst for RBC media company. Your job is to collect different data.
#  You're currently working on a system that receives continuous stream of real time data of an ongoing massive event. 
# 
# How would you process/handle it?
# 
# - a) Store the data in batches then process
# - b) Store the whole data in the db then process
# - c) Others => answer with the help of generators

# In[13]:


import time
import random

# generator func
def real_time_data_stream():
    # simulate continuous live stream from different users
    while True:
        # simulate different data coming to the system/that the system receives 
        data_point = generate_random_data()
        # on demand request/point and kill
        yield data_point
        # simulate a 2 sec interval btw the data points
        time.sleep(2)
   


# random func to get different data from the users
def generate_random_data():
    # simulate a random generation logic
    return random.randint(1, 500)
     


# In[14]:


# simulate the real time data continuous collection

# instantiate func obj
data_stream = real_time_data_stream()
data_stream


# In[17]:


# process the real time data by you (the analyst) 
def process_real_time_data(data_point):
    print(f"Processing real time data: {data_point}.")
    # perform any other operation/analysis



for _ in range(10):
    data_point = next(data_stream)
    process_real_time_data(data_point)
    time.sleep(1)


# ### Ex 2
# 
# - As a data analyst working with IoT devices, you need to analyze real-time sensor data streaming from various
# sensors deployed in different locations. The data is continuously generated and needs to be processed on the
# fly without overwhelming the system memory. 

# In[22]:


'''
You'll wanna use generators to solve this task. 
How'll you know which sensor sends which signal?
'''

# simulate sensor sending signals at different times
def generate_random_signals(sensor_id):
    # generate random signals from the sensors
    sensor_signal = random.uniform(0.01, 1)
    return {"sensor_id":sensor_id, "sensor_signal_data":round(sensor_signal, 2)}
    
    
# sensor_generator
def sensor_data_stream(sensor_id):
    # simulate a continuous sensor data/signal streaming
    while True:
        # simulate different data coming to the system/that the system receives 
        sensor_signal = generate_random_signals(sensor_id)
        # on demand request/point and kill
        yield sensor_signal
        # simulate a 2 sec interval btw the sensor signals/data
        time.sleep(2)        
        


# In[23]:


# instantiate the sensor_generator obj by assigning them to diff sensors
sensor_1_stream = sensor_data_stream(1)
sensor_2_stream = sensor_data_stream(2)
sensor_3_stream = sensor_data_stream(3)
sensor_4_stream = sensor_data_stream(4)
sensor_5_stream = sensor_data_stream(5)


# In[24]:


def process_real_time_sensor(sensor_data):
    print(f"Processing real time sensor signal: {sensor_data}!")
    # perform any other operation/analysis


# process the sensr data in real time
for _ in range(10):
    sensor_1_data = next(sensor_1_stream)
    sensor_2_data = next(sensor_2_stream)
    sensor_3_data = next(sensor_3_stream)
    sensor_4_data = next(sensor_4_stream)
    sensor_5_data = next(sensor_5_stream)
    
    # invoke the sensor processing function
    process_real_time_sensor(sensor_1_data)
    process_real_time_sensor(sensor_2_data)
    process_real_time_sensor(sensor_3_data)
    process_real_time_sensor(sensor_4_data)
    process_real_time_sensor(sensor_5_data)
    time.sleep(1.5)


# ### Take Home Exercise
# 
# - As a data analyst working for IVC data firm, you've been given a task to analyze a log data generated by a web app in real time. The log entries continuously stream in, and processing them in real time without storing them in memory is crucial. How do you handle this?
# 
# - Show your codes with appropriate comments in the context of the problem you're solving :)

# In[ ]:
